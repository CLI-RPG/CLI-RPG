version: '3.1'

services:

  mongo_auth:
    image: mongo
    restart: always
    # ports:
    #   - 27017:27017
    env_file:
        CLI-RPG-Authentication/secret.env
    volumes:
      - mongo-db-auth:/data/db
    networks:
      - auth_db_gui
      - auth_db
      - auth_db_grafana


  mongo_express_auth:
    depends_on:
      - mongo_auth
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    env_file:
        CLI-RPG-Authentication/secret.env
    networks:
      - auth_db_gui
      - gateway_auth_db_gui

  auth_server:
    depends_on:
      - mongo_auth
    image: auth_server
    # ports:
    #   - 5000:5000
    restart: always
    build: ./CLI-RPG-Authentication/auth
    env_file:
      CLI-RPG-Authentication/secret.env
    networks:
      - auth_db
      - gateway_auth

  grafana:
    depends_on:
      - mongo_auth
    build:
      context: ./CLI-RPG-Authentication/grafana-mongodb-docker
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./CLI-RPG-Authentication/data:/var/lib/grafana
      - /var/lib/grafana/plugins
    environment:
      GF_SERVER_ROOT_URL : /grafana/
      GF_SERVER_SERVE_FROM_SUBPATH: true
      GF_SERVER_ENFORCE_DOMAIN: false
    networks:
      - gateway_grafana
      - auth_db_grafana
      - bl_db_grafana

  bl_service:
    image: bl_service
    # ports:
    #   - 5002:5000
    restart: always
    build: ./CLI-RPG-Business-Logic
    env_file:
      ./CLI-RPG-Business-Logic/bl_server.env
    networks:
      - gateway_bl
      - bl_io_adapter

  mongo_bl:
    image: mongo
    restart: always
    # ports:
    #   - 27016:27017
    env_file:
      ./CLI-RPG-IO/io_db/db.env
    networks:
      - io_db
      - bl_db_grafana
      - bl_db_gui

  mongo_express_bl:
    image: mongo-express
    restart: always
    ports:
      - 8082:8081
    env_file:
      ./CLI-RPG-IO/io_db/db.env
    networks:
      - gateway_bl_db_gui
      - bl_db_gui

  io_service:
    depends_on:
      - mongo_bl
    image: io_service
    # ports:
    #   - 5001:5000
    restart: always
    build: ./CLI-RPG-IO/io_service
    env_file:
      ./CLI-RPG-IO/io_service/io_service.env
    networks:
      - bl_io_adapter
      - io_db

  kong:
    image: kong:latest
    restart: always
    volumes:
      - ./kong:/usr/local/kong/declarative
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_ADMIN_GUI_PATH: /manager
      KONG_ADMIN_GUI_URL: http://localhost:8001/manager

    ports:
      - 8000:8000
      - 8001:8001
      - 8443:8443
    networks:
      - gateway_auth_db_gui
      - gateway_auth
      - gateway_grafana
      - gateway_bl
      - gateway_bl_db_gui
      - gateway_frontend

  frontend:
    image: "node:latest"
    user: "node"
    restart: always
    working_dir: /home/node/app
    environment:
      - NODE_ENV=production
    volumes:
      - ./CLI-RPG-Frontend/:/home/node/app
    command: "npm start"
    networks:
      - gateway_frontend

volumes:
  mongo-db-auth:

networks:
  gateway_auth_db_gui:
  gateway_auth:
  gateway_grafana:
  gateway_bl:
  gateway_bl_db_gui:
  gateway_frontend:
  auth_db_gui:
  auth_db:
  auth_db_grafana:
  bl_db_grafana:
  bl_io_adapter:
  io_db:
  bl_db_gui:
